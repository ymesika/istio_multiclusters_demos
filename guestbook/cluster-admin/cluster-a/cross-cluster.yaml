# Configure our own gateway to allow traffic in to `svc.a.remote` (i.e. this indicates we're cluster a)
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: ingress-gateway
spec:
  # select the istio-ingressgateway service
  selector:
    istio: ingressgateway
  # allow any HTTP traffic for a hosts ending in svc.a.remote
  servers:
  - hosts:
    - "*.svc.a.remote"
    port:
      number: 80
      protocol: HTTP
      name: http
  # TODO: HTTPS
  # - hosts:
  #   - "*.svc.a.remote"
  #   port: 443
  #   protocol: HTTPS
---
# Wire up INGRESS_IP_ADDRESS as the destination for all hosts matching
# "*.svc.b.remote". If we wanted to add another cluster, we just need to
# create another ServiceEntry like this one, e.g. for the hosts
# "*.svc.c.remote".
#
# INGRESS_IP_ADDRESS is populated by the makefile when deploying this config
# to the cluster. The value is the static IP address assigned to the ingress
# of the remote cluster.
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: b-ingress
spec:
  hosts:
  - ingress.b.remote
  ports:
  - number: 80
    name: http
    protocol: HTTP	
  resolution: STATIC
  endpoints:
  - address: INGRESS_IP_ADDRESS
    ports:
      http: INGRESS_PORT
---
# Routes all traffic for hosts *.svc.b.remote to the ServiceEntry we just
# defined above. Note that the port values used here can be used to shift
# the ports traffic is sent on to the ingress (e.g. to allow for egress/
# ingress proxy pairs that multiplex multiple protocols over the same
# physical ports).
#
# Note that this route's destination's host exactly matches the host of the
# ServiceEntry.
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: b-virtual-service
spec:
  # Match all hosts ending in "svc.b.remotes"
  hosts:
  - "*.svc.b.remote"
  # Apply this rule only to traffic inside of the mesh, and not at the
  # gateways. (Note that the "mesh" gateway is implied when no gateways are
  # listed, so we could just omit this field.)
  gateways:
  - mesh
  http:
  - route:
    - destination:
        # Send this traffic to the ServiceEntry b-ingress
        host: ingress.b.remote
        port:
          number: 80
      weight: 100
#  tcp:
#  - match:
#    - port: 443
#    route:
#    - destination:
#        host: b-ingress
---
# Since we're creating hostnames out of nothing, and our apps resolve hostnames
# via DNS before making HTTP calls, we need some DNS server that will resolve our
# fake names for us. This config sends all requests matching *.remote to the
# CoreDNS servers we have running configured to return 10.0.0.0 for all *.remote
# domains.
apiVersion: v1
kind: ConfigMap
metadata:
  name: kube-dns
  namespace: kube-system
data:
  stubDomains: |
    {"remote": ["CORE_DNS_IP"]}
